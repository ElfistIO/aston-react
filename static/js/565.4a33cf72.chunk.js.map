{"version":3,"file":"static/js/565.4a33cf72.chunk.js","mappings":"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","sources":["webpack://aston-react/./src/components/setHeader/setHeader.module.scss?f162","components/setHeader/setHeader.tsx","webpack://aston-react/./src/pages/set/setPage.module.scss?2273","pages/set/setPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"setHeader__wrapper\":\"setHeader_setHeader__wrapper__-lauh\",\"setHeader__info\":\"setHeader_setHeader__info__+9-cD\",\"setHeader__info_name\":\"setHeader_setHeader__info_name__oJHDB\",\"setHeader__info_card\":\"setHeader_setHeader__info_card__AVvWK\",\"setHeader__info_block\":\"setHeader_setHeader__info_block__l9yrp\",\"setHeader__info_box\":\"setHeader_setHeader__info_box__+qP8L\",\"setHeader__icon\":\"setHeader_setHeader__icon__RRjWc\"};","import { Dispatch, SetStateAction } from \"react\";\r\nimport { Filter } from \"../filter/filter\";\r\n\r\nimport * as Scry from \"scryfall-sdk\";\r\nimport s from \"./setHeader.module.scss\";\r\n\r\ninterface Props {\r\n  set: Scry.Set | undefined;\r\n  setShowType: Dispatch<SetStateAction<string>>;\r\n  setSortListBy: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nexport const SetHeader = (props: Props) => {\r\n  const { set, setShowType, setSortListBy } = props;\r\n\r\n  return (\r\n    <div className={s.setHeader__wrapper}>\r\n      <div className=\"container\">\r\n        <div className={s.setHeader__info}>\r\n          <div className={s.setHeader__info_box}>\r\n            <img\r\n              src={set?.icon_svg_uri}\r\n              alt=\"set_icon\"\r\n              className={s.setHeader__icon}\r\n            />\r\n            <div className={s.setHeader__info_wrapper}>\r\n              <div className={s.setHeader__info_name}>\r\n                {set?.name} {`(${set?.code.toUpperCase()})`}\r\n              </div>\r\n              <div className={s.setHeader__info_block}>Block: {set?.block}</div>\r\n              <div className={s.setHeader__info_card}>\r\n                {set?.card_count.toString()} cards {`\\u2022`} Released{\" \"}\r\n                {set?.released_at}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Filter setShowType={setShowType} setSortListBy={setSortListBy} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"setPage__wrapper\":\"setPage_setPage__wrapper__Tljdc\"};","import { SetStateAction, useEffect, useState } from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { setSearchSort, setSearchState } from \"../../app/slices/searchSlice\";\r\nimport { SetHeader } from \"../../components/setHeader/setHeader\";\r\nimport { ChecklistType } from \"../searchResult/checklistType/checklistType\";\r\nimport { FullType } from \"../searchResult/FullType/FullType\";\r\nimport { ImageType } from \"../searchResult/imageType/imageType\";\r\nimport { Pagination } from \"../../components/pagination/pagination\";\r\n\r\nimport * as Scry from \"scryfall-sdk\";\r\nimport s from \"./setPage.module.scss\";\r\n\r\nexport const SetPage = () => {\r\n  const [isLoadingState, setIsLoadingState] = useState<boolean>(false);\r\n  const [set, setSet] = useState<Scry.Set>();\r\n  const [searchParams] = useSearchParams();\r\n  const setId = searchParams.get(\"id\");\r\n  const cards = useAppSelector((state) => state.searchResult.searchState);\r\n  const [showType, setShowType] = useState<string>(\"images\");\r\n  const [sortListBy, setSortListBy] = useState<string>(\"name\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const CARDS_PER_PAGE = 40;\r\n  const indexOfLastCard = currentPage * CARDS_PER_PAGE;\r\n  const indexOfFirstCard = indexOfLastCard - CARDS_PER_PAGE;\r\n  const currentCards = cards.slice(indexOfFirstCard, indexOfLastCard);\r\n  const paginate = (pageNumber: SetStateAction<number>) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n  const dispatch = useAppDispatch();\r\n\r\n  function renderShowType(showType: string) {\r\n    switch (showType) {\r\n      case \"images\":\r\n        return <ImageType cards={currentCards} />;\r\n      case \"checklist\":\r\n        return <ChecklistType cards={currentCards} />;\r\n      case \"full\":\r\n        return <FullType cards={currentCards} />;\r\n      default:\r\n        return <ImageType cards={currentCards} />;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoadingState(true);\r\n    dispatch(setSearchState([]));\r\n    async function getSet() {\r\n      if (setId) await Scry.Sets.byId(setId).then(setSet).catch(console.error);\r\n    }\r\n    getSet();\r\n    async function getCards() {\r\n      await set\r\n        ?.getCards()\r\n        .then((result) => dispatch(setSearchState(result)))\r\n        .catch(console.error);\r\n    }\r\n    getCards();\r\n    setIsLoadingState(false);\r\n  }, [dispatch, set, setId]);\r\n\r\n  useEffect(() => {\r\n    dispatch(setSearchSort(sortListBy));\r\n  }, [dispatch, sortListBy]);\r\n\r\n  return (\r\n    <div className={s.setPage__wrapper}>\r\n      <SetHeader\r\n        set={set}\r\n        setShowType={setShowType}\r\n        setSortListBy={setSortListBy}\r\n      />\r\n      <div className=\"container\">\r\n        {isLoadingState ? (\r\n          <div className=\"progress cyan lighten-1\">\r\n            <div className=\"indeterminate\"></div>\r\n          </div>\r\n        ) : (\r\n          renderShowType(showType)\r\n        )}\r\n        <Pagination\r\n          count={cards?.length}\r\n          paginate={paginate}\r\n          cardsPerPage={CARDS_PER_PAGE}\r\n          currentPage={currentPage}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"names":["SetHeader","props","set","setShowType","setSortListBy","className","s","src","icon_svg_uri","alt","name","code","toUpperCase","block","card_count","toString","released_at","SetPage","useState","isLoadingState","setIsLoadingState","setSet","useSearchParams","setId","get","cards","useAppSelector","state","searchResult","searchState","showType","sortListBy","currentPage","setCurrentPage","indexOfLastCard","indexOfFirstCard","currentCards","slice","dispatch","useAppDispatch","useEffect","Scry","Sets","byId","then","catch","console","error","getCards","result","setSearchState","getSet","setSearchSort","FullType","renderShowType","count","length","paginate","pageNumber","cardsPerPage"],"sourceRoot":""}