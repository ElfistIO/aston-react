{"version":3,"file":"static/js/696.25faa7a4.chunk.js","mappings":"sSACA,EAA+B,mCAA/B,EAAsF,wC,SCiBzEA,EAAe,WAC1B,OAAgCC,EAAAA,EAAAA,UAAiB,UAAjD,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAoCF,EAAAA,EAAAA,UAAiB,QAArD,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAuBC,EAAAA,EAAAA,MACjBC,GADN,eACiCC,IAAI,UAC/BC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KAAe,SAACC,GAAD,OAAWA,EAAMC,aAAaC,WAA9B,IACvBC,GAAcJ,EAAAA,EAAAA,KAAe,SAACC,GAAD,OAAWA,EAAMC,aAAaE,WAA9B,IACnC,GAAsCf,EAAAA,EAAAA,UAAS,GAA/C,eAAOgB,EAAP,KAAoBC,EAApB,KAEMC,EADiB,GACCF,EAClBG,EAAmBD,EAFF,GAGjBE,EAAeV,EAAMW,MAAMF,EAAkBD,GAKnD,GAAqB,IAAjBR,EAAMY,OAAc,CAAC,IACRC,EADO,yCACtB,WAA2BC,GAA3B,4FACqDC,EAAKC,MAAMF,OAAX,eACzCA,IACRG,aAHJ,OACQC,EADR,OAIEpB,GAASqB,EAAAA,EAAAA,IAAoBvB,IAC7BE,GAASsB,EAAAA,EAAAA,IAAeF,IAL1B,2CADsB,sDAQtBL,EAAYjB,EACb,CAmBD,OAJAyB,EAAAA,EAAAA,YAAU,WACRvB,GAASwB,EAAAA,EAAAA,IAAc7B,GACxB,GAAE,CAACK,EAAUL,KAGZ,kBAAM8B,UAAWC,EAAjB,WACE,SAAC,IAAD,CAAQhC,YAAaA,EAAaE,cAAeA,KACjD,gBAAK6B,UAAWC,EAAhB,UACE,gBAAKD,UAAU,YAAf,UACE,6BACE,8BAASvB,EAAMY,OAAf,YADF,6BAEGP,EAFH,YAMJ,iBAAKkB,UAAU,YAAf,UA5BJ,SAAwBhC,GACtB,OAAQA,GACN,IAAK,SAML,QACE,OAAO,SAAC,IAAD,CAAWS,MAAOU,IAL3B,IAAK,YACH,OAAO,SAAC,IAAD,CAAeV,MAAOU,IAC/B,IAAK,OACH,OAAO,SAACe,EAAA,EAAD,CAAUzB,MAAOU,IAI7B,CAkBMgB,CAAenC,IAChB,SAAC,IAAD,CACEoC,MAAK,OAAE3B,QAAF,IAAEA,OAAF,EAAEA,EAAOY,OACdgB,SA/CS,SAACC,GAChBtB,EAAesB,EAChB,EA8COC,aApDe,GAqDfxB,YAAaA,SAKtB,C","sources":["webpack://aston-react/./src/pages/searchResult/searchResult.module.scss?2c78","pages/searchResult/searchResult.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main__result\":\"searchResult_main__result__UW3sZ\",\"main__result_info\":\"searchResult_main__result_info__MRVam\"};","import { SetStateAction, useEffect, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport { Filter } from \"../../components/filter/filter\";\r\nimport { ImageType } from \"./imageType/imageType\";\r\nimport { ChecklistType } from \"./checklistType/checklistType\";\r\nimport { FullType } from \"./FullType/FullType\";\r\nimport { MagicArray } from \"scryfall-sdk/out/util/MagicEmitter\";\r\nimport {\r\n  setSearchInputState,\r\n  setSearchSort,\r\n  setSearchState,\r\n} from \"../../app/slices/searchSlice\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { Pagination } from \"../../components/pagination/pagination\";\r\n\r\nimport * as Scry from \"scryfall-sdk\";\r\nimport s from \"./searchResult.module.scss\";\r\n\r\nexport const SearchResult = () => {\r\n  const [showType, setShowType] = useState<string>(\"images\");\r\n  const [sortListBy, setSortListBy] = useState<string>(\"name\");\r\n  const [searchParams] = useSearchParams();\r\n  const searchValue = searchParams.get(\"search\");\r\n  const dispatch = useAppDispatch();\r\n  const cards = useAppSelector((state) => state.searchResult.searchState);\r\n  const searchInput = useAppSelector((state) => state.searchResult.searchInput);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const CARDS_PER_PAGE = 20;\r\n  const indexOfLastCard = currentPage * CARDS_PER_PAGE;\r\n  const indexOfFirstCard = indexOfLastCard - CARDS_PER_PAGE;\r\n  const currentCards = cards.slice(indexOfFirstCard, indexOfLastCard);\r\n  const paginate = (pageNumber: SetStateAction<number>) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  if (cards.length === 0) {\r\n    async function fetchSearch(search: string) {\r\n      const result: MagicArray<Scry.Card, never> = await Scry.Cards.search(\r\n        `name:${search}`\r\n      ).waitForAll();\r\n      dispatch(setSearchInputState(searchValue!));\r\n      dispatch(setSearchState(result));\r\n    }\r\n    fetchSearch(searchValue!);\r\n  }\r\n\r\n  function renderShowType(showType: string) {\r\n    switch (showType) {\r\n      case \"images\":\r\n        return <ImageType cards={currentCards} />;\r\n      case \"checklist\":\r\n        return <ChecklistType cards={currentCards} />;\r\n      case \"full\":\r\n        return <FullType cards={currentCards} />;\r\n      default:\r\n        return <ImageType cards={currentCards} />;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(setSearchSort(sortListBy));\r\n  }, [dispatch, sortListBy]);\r\n\r\n  return (\r\n    <main className={s.main__result}>\r\n      <Filter setShowType={setShowType} setSortListBy={setSortListBy} />\r\n      <div className={s.main__result_info}>\r\n        <div className=\"container\">\r\n          <span>\r\n            <strong>{cards.length} cards</strong> where the name includes \"\r\n            {searchInput}\"\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        {renderShowType(showType)}\r\n        <Pagination\r\n          count={cards?.length}\r\n          paginate={paginate}\r\n          cardsPerPage={CARDS_PER_PAGE}\r\n          currentPage={currentPage}\r\n        />\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n"],"names":["SearchResult","useState","showType","setShowType","sortListBy","setSortListBy","useSearchParams","searchValue","get","dispatch","useAppDispatch","cards","useAppSelector","state","searchResult","searchState","searchInput","currentPage","setCurrentPage","indexOfLastCard","indexOfFirstCard","currentCards","slice","length","fetchSearch","search","Scry","Cards","waitForAll","result","setSearchInputState","setSearchState","useEffect","setSearchSort","className","s","FullType","renderShowType","count","paginate","pageNumber","cardsPerPage"],"sourceRoot":""}